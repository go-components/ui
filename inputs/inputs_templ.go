// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.543
package inputs

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import "strconv"

type Errors map[string]string

func (e *Errors) IsNil() bool {
	return e == nil
}

type InputProps struct {
	id           string
	name         string
	autofocus    bool
	autocomplete string
	tabindex     string
	_type        string
	errorMessage string
	placeholder  string
	value        string
}

func Autofocus() func(*InputProps) {
	return func(ip *InputProps) { ip.autofocus = true }
}

func Autocomplete(completion string) func(*InputProps) {
	return func(ip *InputProps) { ip.autocomplete = completion }
}

func Tabindex(index int) func(*InputProps) {
	return func(ip *InputProps) { ip.tabindex = strconv.Itoa(index) }
}

func Type(_type string) func(*InputProps) {
	return func(ip *InputProps) { ip._type = _type }
}

func Error(errors Errors) func(*InputProps) {
	return func(ip *InputProps) { ip.errorMessage = errors[ip.name] }
}

func Placeholder(placeholder string) func(*InputProps) {
	return func(ip *InputProps) { ip.placeholder = placeholder }
}

func Value(value string) func(*InputProps) {
	return func(ip *InputProps) { ip.value = value }
}

func Input(id, name string, options ...func(*InputProps)) templ.Component {
	props := &InputProps{id: id, name: name}
	for _, o := range options {
		o(props)
	}
	if props._type == "" {
		props._type = "text"
	}
	attrs := templ.Attributes{
		"name":         name,
		"id":           id,
		"class":        "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[invalid=true]:ring-destructive",
		"autofocus":    props.autofocus,
		"autocomplete": props.autocomplete,
		"tabindex":     props.tabindex,
		"type":         props._type,
		"placeholder":  props.placeholder,
		"value":        props.value,
	}
	if props.errorMessage != "" {
		attrs["autofocus"] = "on"
	}
	return input(props.errorMessage, attrs)
}

func input(err string, attrs templ.Attributes) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<input")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.RenderAttributes(ctx, templ_7745c5c3_Buffer, attrs)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" data-invalid=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(strconv.FormatBool(err != "")))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if err != "" {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<span class=\"text-sm text-destructive\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var2 string
			templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(err)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `inputs/inputs.templ`, Line: 78, Col: 46}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
